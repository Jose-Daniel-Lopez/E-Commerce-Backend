package com.app.entities;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import jakarta.persistence.*;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.*;
import org.springframework.format.annotation.DateTimeFormat;

import java.time.LocalDateTime;

/**
 * Entity representing a product review submitted by a user.
 * <p>
 * This class maps to the {@code product_reviews} database table and includes relationships
 * with {@link User} and {@link Product}. It supports JPA persistence and is used in conjunction
 * with DTOs like {@link com.app.DTO.ProductReviewDTO} to separate persistence concerns from API contracts.
 * </p>
 *
 * <p>
 * Fields are lazily loaded where appropriate, and circular references in {@code toString}, {@code equals},
 * and {@code hashCode} are prevented using Lombok's exclusion mechanisms.
 * </p>
 */
@Getter
@Setter
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "product_reviews")
@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
public class ProductReview {

    /**
     * Unique identifier for the review.
     * Auto-generated by the database using identity strategy.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Rating given by the user for the product.
     * Must be between 1 (lowest) and 5 (highest).
     */
    @NotNull(message = "Rating is required")
    @Min(value = 1, message = "Rating must be at least 1")
    @Max(value = 5, message = "Rating must be at most 5")
    private Integer rating;

    /**
     * Optional comment provided by the user.
     * Maximum length is 1000 characters.
     */
    @Size(max = 1000, message = "Comment cannot exceed 1000 characters")
    private String comment;

    /**
     * Timestamp when the review was created.
     * Typically set automatically upon entity creation.
     */
    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
    private LocalDateTime createdAt;

    /**
     * The user who submitted the review.
     * Mapped to the {@code user_id} foreign key column.
     * Not loaded eagerly to avoid performance issues.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    @JsonIgnore  // Prevents serialization in JSON responses (avoid circular references)
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private User user;

    /**
     * The product being reviewed.
     * Mapped to the {@code product_id} foreign key column.
     * Not loaded eagerly to avoid performance issues.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "product_id", nullable = false)
    @JsonIgnore  // Prevents serialization in JSON responses (avoid circular references)
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Product product;

    /**
     * Constructs a new ProductReview with essential fields.
     * <p>
     * Useful for service-layer instantiation when creating a new review.
     * The {@code id} and relationships (e.g., associations) are typically set later.
     * </p>
     *
     * @param rating    the rating given by the user (1â€“5)
     * @param comment   the optional comment (can be null)
     * @param createdAt the timestamp when the review was created
     */
    public ProductReview(Integer rating, String comment, LocalDateTime createdAt) {
        this.rating = rating;
        this.comment = comment;
        this.createdAt = createdAt;
    }

    /**
     * Custom {@code toString()} method to improve logging and debugging.
     * Excludes nested {@link Product} to prevent verbose or circular output.
     *
     * @return a string representation of the review
     */
    @Override
    public String toString() {
        return "ProductReview{" +
                "id=" + id +
                ", rating=" + rating +
                ", comment='" + comment + '\'' +
                ", createdAt=" + createdAt +
                ", userId=" + (user != null ? user.getId() : null) +
                ", productId=" + (product != null ? product.getId() : null) +
                '}';
    }
}